// Force TS to interpret this file as a module.
export {}

declare global {

    /**
     * The Console object provides access to the service messages.
     */
    interface Console {
        /**
         * Writes an error message to the console if the assertion is false. If the assertion is true, nothing happens.
         * @param condition Any boolean expression. If the assertion is false, the message is written to the console.
         * @param message A JavaScript string containing zero or more substitution strings.
         * @param data A list of JavaScript objects to output.
         */
        assert(condition?: boolean, message?: string, ...data: any[]): void;
        /**
         * Does nothing. Provided for compatability only.
         */
        clear(): void;
        /**
         * Logs the number of times that this particular call to count() has been called.
         * @param label Identifies the specific counter. Defaults to 'default'.
         */
        count(label?: string): void;
        /**
         * Outputs a message to the service messages at the "debug" log level. 
         * @param message A JavaScript string containing zero or more substitution strings.
         * @param optionalParams A list of JavaScript objects to output.
         */
        debug(message?: any, ...optionalParams: any[]): void;
        /**
         * Outputs an object to the service messages.
         * @param value The value to emit.
         */
        dir(value?: any): void;
        /**
         * Outputs an XML object to the service messages.
         * @param value The value to emit.
         */
        dirxml(value: any): void;
        /**
         * Outputs a message to the service messages at the "error" log level. 
         * @param message A JavaScript string containing zero or more substitution strings.
         * @param optionalParams A list of JavaScript objects to output.
         */
        error(message?: any, ...optionalParams: any[]): void;
        /**
         * Outputs a message to the service messages at the "error" log level. 
         * @param message A JavaScript string containing zero or more substitution strings.
         * @param optionalParams A list of JavaScript objects to output.
         */
        exception(message?: string, ...optionalParams: any[]): void;
        /**
         * Does nothing. Provided for compatability only.
         * @param groupTitle Ignored.
         * @param optionalParams Ignored.
         */
        group(groupTitle?: string, ...optionalParams: any[]): void;
        /**
         * Does nothing. Provided for compatability only.
         * @param groupTitle Ignored.
         * @param optionalParams Ignored.
         */
        groupCollapsed(groupTitle?: string, ...optionalParams: any[]): void;
        /**
         * Does nothing. Provided for compatability only.
         */
        groupEnd(): void;
        /**
         * Outputs a message to the service messages at the "information" log level. 
         * @param message A JavaScript string containing zero or more substitution strings.
         * @param optionalParams A list of JavaScript objects to output.
         */
        info(message?: any, ...optionalParams: any[]): void;
        /**
         * Outputs a message to the service messages at the "information" log level. 
         * @param message A JavaScript string containing zero or more substitution strings.
         * @param optionalParams A list of JavaScript objects to output.
         */
        log(message?: any, ...optionalParams: any[]): void;
        /**
         * Starts a timer with the specified name.
         * @param reportName The name of the timer.
         */
        profile(reportName?: string): void;
        /**
         * Ends a timer with the specified name and emits the duration to the service messages.
         * @param reportName The name of the timer.
         */
        profileEnd(reportName?: string): void;
        /**
         * Outputs an object to the service messages.
         * @param value The value to emit.
         */
        table(...tabularData: any[]): void;
        /**
         * Starts a timer with the specified name.
         * @param label The name of the timer.
         */
        time(label?: string): void;
        /**
         * Ends a timer with the specified name and emits the duration to the service messages.
         * @param label The name of the timer.
         */
        timeEnd(label?: string): void;
        /**
         * Emits a trace message to the debug window.
         * @param message A JavaScript string containing zero or more substitution strings.
         * @param optionalParams A list of JavaScript objects to output.
         */
        trace(message?: any, ...optionalParams: any[]): void;
        /**
         * Outputs a message to the service messages at the "warning" log level. 
         * @param message A JavaScript string containing zero or more substitution strings.
         * @param optionalParams A list of JavaScript objects to output.
         */
        warn(message?: any, ...optionalParams: any[]): void;
    }

    /**
     * The logging console.
     */
    let console: Console;

}