export {}

declare global {

    /**
     * A reserved type.
     */
    type Reserved = null;

    /**
     * The different types of values.
     */
    type ServiceValueType = 
        /**
         * A text (string) field.
         */
        "string" |
        /**
         * A number (int64) field.
         */
        "number" |
        /**
         * A decimal field.
         */
        "decimal" |
        /**
         * A boolean field.
         */
        "boolean" |
        /**
         * A date and time field.
         */
        "dateTime" |
        /**
         * An extended string field
         */
        "extendedString" |
        /**
         * An extended number field
         */
        "extendedNumber" |
        /**
         * An extended dateTime field
         */
        "extendedDateTime" |
         /**
         * An attachment field (file/image)
         */
        "attachment";
        
    /**
     * The different types of methods.
     */
    type ServiceMethodType =
        /**
         * A read method.
         */
        "read" |
        /**
         * A list method.
         */
        "list" |
        /**
         * An execute method.
         */
        "execute" |
        /**
         * An update method.
         */
        "update" |
        /**
         * A delete method.
         */
        "delete" |
        /**
         * A create method.
         */
        "create";

    type ExtendedType =
        /**
         * An extended string memo type
         */
        "k2.com/2019/memo" |
        /**
         * An extended number autoNumber type
         */
        "k2.com/2019/auto" |
        /**
         * An attachment image type
         */
        "k2.com/2019/image" |
        /**
         * An extended datetime date type
         */
        "k2.com/2019/date" |
        /**
         * An extended datetime time type
         */
        "k2.com/2019/time";
           

    /**
     * Represents metadata about an entity.
     */
    interface Metadata {
        /**
         * The display name of the entity.
         */ 
        displayName?: string;
        /**
         * The description of the entity.
         */
        description?: string;

        /**
         * Any private data associated with the object
         */
        data?: any;
    }

    /**
     * Represents an entity.
     */
    interface TypedEntity extends Metadata {
        /**
         * The type of the entity.
         */
        type: ServiceValueType;

        /**
         * The extended type of the entity.
         */
        extendedType?: ExtendedType;
    }

    /**
     * Represents a service method.
     */
    interface ServiceMethod extends Metadata {
        /**
         * The type of the method.
         */
        type: ServiceMethodType;

        /**
         * The input properties.
         */
        inputs?: string[];

        /**
         * The required input properties.
         */
        requiredInputs?: string[];
        
        /**
         * The method parameters 
         */
        parameters?: { [name: string]: MethodParameter};

        /**
         * The required method parameters.
         */
        requiredParameters?: string[];

        /**
         * The output properties.
         */
        outputs?: string[];
    }

    /**
     * Represents a service property.
     */
    interface ServiceProperty extends TypedEntity {

    }

    /**
     * Represents a method parameter.
     */
    interface MethodParameter extends TypedEntity {

    }

    /**
     * Represents a service object.
     */
    interface ServiceObject extends Metadata {

        /**
         * The version of the object.
         */
        version?: string;

        /**
         * Whether the service object is active.
         */
        isActive?: boolean;

        /**
         * The properties.
         */
        properties?: { [name: string]: ServiceProperty };

        /**
         * The methods.
         */
        methods?: { [name: string]: ServiceMethod };
    }

    /**
     * Represents a folder.
     */
    interface AbstractFolder {
        /**
         * The service objects.
         */
        objects?: { [name: string]: ServiceObject };

        /**
         * Any private data associated with the object
         */
        data?: any;
    }

    /**
     * Represents a folder.
     */
    interface ServiceFolder extends AbstractFolder, Metadata {

    }

    /**
     * Represents a service.
     */
    interface Service extends ServiceFolder {
        
    }

    /**
     * Represents the describe event arguments.
     */
    type DescribeEventArgs = {
        configuration: SingleRecord
    };

    /**
     * Represents the describe handler.
     */
    type DescribeEventHandler = (args: DescribeEventArgs) => void;

    /**
     * Sets the event handler for describe events.
     */
    let ondescribe: DescribeEventHandler;

    /**
     * Returns the service metadata during the describe event.
     */
    function postSchema(service: Service): void;
}
