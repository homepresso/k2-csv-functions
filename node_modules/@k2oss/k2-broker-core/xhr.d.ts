// Force TS to interpret this file as a module.
export {}

declare global {

    type XMLHttpRequestResponseType = "" | "text" | "json" | "document" | "blob" | "arraybuffer";

    interface XMLHttpRequest {
        onreadystatechange: ((this: XMLHttpRequest) => any) | null;
        readonly readyState: number;
        readonly response: any;
        readonly responseText: string;
        responseType: XMLHttpRequestResponseType;
        readonly responseURL: string;
        readonly status: number;
        readonly statusText: string;
        timeout?: number;
        withCredentials: boolean;
        abort(): void;
        getResponseHeader(name: string): string | null;
        open(method: string, url: string): void;
        send(body?: any): void;
        setRequestHeader(name: string, value: string): void;
        onabort: ((this: XMLHttpRequest) => any) | null;
        onerror: ((this: XMLHttpRequest) => any) | null;
        ontimeout: ((this: XMLHttpRequest) => any) | null;
    }

    const XMLHttpRequest: {
        prototype: XMLHttpRequest;
        new(): XMLHttpRequest;
    };
}