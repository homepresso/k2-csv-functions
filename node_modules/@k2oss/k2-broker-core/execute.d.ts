// Force TS to interpret this file as a module.
export {}

declare global {

    /**
     * The valid types for result values.
     */
    type RecordValue = null | string | number | boolean | Date | Attachment;
    
    /**
     * A single result value.
     */
    type SingleRecord = { [name:string]: RecordValue };

    /**
     * A set of result values.
     */
    type RecordSet = Iterable<SingleRecord>;

    /**
     * Represents the execution event arguments.
     */
    type ExecuteEventArgs = {
        objectName: string;
        methodName: string;
        parameters: SingleRecord;
        properties: SingleRecord;
        configuration: SingleRecord;
        schema: Service;
    };
    
    /**
     * Represents the execute handler.
     */
    type ExecuteEventHandler = (args: ExecuteEventArgs) => void;

    /**
     * Sets the event handler for describe events.
     */
    let onexecute: ExecuteEventHandler;

    /**
     * Valid types for postResult.
     */
    type ExecuteResult =  SingleRecord | RecordSet;

    /**
     * Returns the service metadata during the describe event.
     * @returns A pending promise for the send operation. It is safe to call postResult without waiting for the previous promise to resolve.
     */
    function postResult(result: ExecuteResult): Promise<void>;

}
